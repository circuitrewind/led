#ifndef __LED_RENDER_H__
#define __LED_RENDER_H__


#include "led_array.h"
#include "led_grid.h"


#define LED_RENDER_TOTAL 8


class led_render {
public:

	////////////////////////////////////////////////////////////////////////////
	// ??
	////////////////////////////////////////////////////////////////////////////
	led_render() {
		for (int i=0; i<total(); i++) {
			list[i] = nullptr;
		}
	};




	////////////////////////////////////////////////////////////////////////////
	// ??
	////////////////////////////////////////////////////////////////////////////
	virtual ~led_render() {
		for (int i=0; i<total(); i++) {
			delete list[i];
			list[i] = nullptr;
		}
	}




	////////////////////////////////////////////////////////////////////////////
	// RENDER ALL OF THE ARRAYS AND GRIDS WITHIN A SINGLE PASS
	////////////////////////////////////////////////////////////////////////////
	void render();




	////////////////////////////////////////////////////////////////////////////
	// ADD A LED ARRAY/GRID TO OUR RENDERING COLLECTION
	////////////////////////////////////////////////////////////////////////////
	bool add(led_array *item) {
		for (int i=0; i<total(); i++) {
			if (list[i] == nullptr) {
				return !!(list[i] = item);
			}
		}
		return false;
	}




	////////////////////////////////////////////////////////////////////////////
	// REMOVE A LED ARRAY/GRID FROM OUR COLLECTION
	////////////////////////////////////////////////////////////////////////////
	bool remove(led_array *item) {
		for (int i=0; i<total(); i++) {
			if (list[i] == item) {
				list[i] = nullptr;
				return true;
			}
		}
		return false;
	}




	////////////////////////////////////////////////////////////////////////////
	// GET THE TOTAL NUMBER OF ARRAY SLOTS
	////////////////////////////////////////////////////////////////////////////
	INLINE uint8_t total() { return LED_RENDER_TOTAL; }




	////////////////////////////////////////////////////////////////////////////
	// GET ONE OF THE LED ARRAYS
	////////////////////////////////////////////////////////////////////////////
	INLINE led_array *array(uint8_t offset) {
		if (offset >= total()) return nullptr;
		return list[offset];
	}




	////////////////////////////////////////////////////////////////////////////
	// GET ONE OF THE LED ARRAYS
	////////////////////////////////////////////////////////////////////////////
	INLINE led_grid *grid(uint8_t offset) {
		if (offset >= total()) return nullptr;
		if (!list[offset]) return nullptr;
		if (list[offset]->type() != LED_GRID) return nullptr;
		return static_cast<led_grid*>(list[offset]);
	}




	////////////////////////////////////////////////////////////////////////////
	// CLEAR ALL ARRAYS / GRIDS
	////////////////////////////////////////////////////////////////////////////
	void clear() {
		for (int x=0; x<total(); x++) {
			if (list[x]) list[x]->clear();
		}
	}




	////////////////////////////////////////////////////////////////////////////
	// FILL ALL ARRAYS / GRIDS WITH A SINGLE COLOR
	////////////////////////////////////////////////////////////////////////////
	void fill(color_t color) {
		for (int x=0; x<total(); x++) {
			if (list[x]) list[x]->fill(color);
		}
	}




	////////////////////////////////////////////////////////////////////////////
	// FADE ALL ARRAYS / GRIDS
	////////////////////////////////////////////////////////////////////////////
	void fade(uint8_t amount = 0x80) {
		for (int x=0; x<total(); x++) {
			if (list[x]) list[x]->fade(amount);
		}
	}




private:
	led_array *list[LED_RENDER_TOTAL];

};


#endif //__LED_RENDER_H__

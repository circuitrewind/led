#ifndef __led_h__
#define __led_h__



#include "../color/color.h"



class led {
	public:



	////////////////////////////////////////////////////////////////////////////
	// CONSTRUCTOR - PASS IN THE PIN FOR THE LEDS, AS WELL AS THE LED COUNT
	////////////////////////////////////////////////////////////////////////////
	INLINE led(uint8_t led_pin, uint16_t led_total) {
		this->_pin		= led_pin;
		this->_total	= led_total;
	}




	////////////////////////////////////////////////////////////////////////////
	// DRAW A SINGLE PIXEL TO THE LED STRIP - USING COLOR_T STRUCT
	// NOTE: implemented differently for each board.
	// This is the only unique method between implementations.
	// See existing versions for an idea of how to port this to a new board.
	////////////////////////////////////////////////////////////////////////////
	void pixel(const color_t &color);




	////////////////////////////////////////////////////////////////////////////
	// ???
	////////////////////////////////////////////////////////////////////////////
	INLINE void pixel(volatile const color_t &color) {
		pixel(color_t(color));
	}




	////////////////////////////////////////////////////////////////////////////
	// DRAW A SINGLE PIXEL TO THE LED STRIP - USING INDIVIDUAL R,G,B VALUES
	////////////////////////////////////////////////////////////////////////////
	INLINE void pixel(uint8_t r, uint8_t g, uint8_t b) {
		pixel(color_t(r, g, b));
	}




	////////////////////////////////////////////////////////////////////////////
	// CLEAR THE ENTIRE PIXEL ARRAY
	////////////////////////////////////////////////////////////////////////////
	void clear() {
		this->begin();

		for (uint16_t i=0; i<this->_total; i++) {
			this->pixel(0, 0, 0);
		}

		this->end();
	}




	////////////////////////////////////////////////////////////////////////////
	// INITIAL SETUP OF THE LED STRIP - CALL AT BEGINNING OF RENDER LOOP
	////////////////////////////////////////////////////////////////////////////
	INLINE void begin() {
		noInterrupts();
		pinMode(this->_pin, OUTPUT);
	}




	////////////////////////////////////////////////////////////////////////////
	// FINALIZE AND SHOW LED STRIP - CALL AT END OF RENDER LOOP
	////////////////////////////////////////////////////////////////////////////
	INLINE void end() {
		digitalWrite(this->_pin, LOW);
		interrupts();
		delay(1);	//TODO: git rid of this last delay!
	}




	////////////////////////////////////////////////////////////////////////////
	// GET THE PIN USED FOR THIS LED STRIP
	////////////////////////////////////////////////////////////////////////////
	INLINE uint8_t pin() const {
		return this->_pin;
	}




	////////////////////////////////////////////////////////////////////////////
	// GET THE NUMBER OF LEDS IN THIS STRIP
	////////////////////////////////////////////////////////////////////////////
	INLINE uint16_t total() const {
		return this->_total;
	}




	private:
		uint8_t		_pin;
		uint16_t	_total;
};


#endif //__led_h__
